@layout LoginLayout
@page "/registration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using QtilityAuth.Shared;
@inject IHttpClientFactory ClientFactory
@using System.Text.Json;
@inject NavigationManager nav
@inject NotificationService notificationService
@attribute [AllowAnonymous]

<h3>Registration Form</h3>

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="false" AllowResetPassword="false" Username=@userName UserText="Email" Password=@password
                     Login=@(args => Register(args, "Login with default values")) LoginText="Register" />
    </RadzenTemplateForm>
</RadzenCard>

@code {
    string userName = "";
    string password = "";

    private RegisterRequest user = new RegisterRequest();
    private bool registrationSuccessful = false;
    public IEnumerable<IdentityDescriptions> errorMessage { get; set; }
    public record RegistrationResponse(bool succeeded, IEnumerable<IdentityDescriptions> errors);
    public record IdentityDescriptions(string code, string description);
    async Task Register(LoginArgs args, string name)
    {
        var client = ClientFactory.CreateClient();
        var values = new Dictionary<string, string>
          {
              { "EmailAddress", args.Username },
              { "Password", args.Password },
              {"DisplayName", args.Username.Split("@")[0]}
          };
        var content = new FormUrlEncodedContent(values);

        var response = await client.PostAsync("https://localhost:7235/register", content);

        var responseString = await response.Content.ReadAsStringAsync();

        if (responseString == string.Empty)
        {
            Console.WriteLine("Empty response");
            return;
        }

        Console.WriteLine(responseString);

        var res = JsonSerializer.Deserialize<RegistrationResponse>(responseString);

        if (res != null)
        {
            if (res.succeeded)
            {
                nav.NavigateTo("/log_in");
            }
            else
            {
                foreach(var err in res.errors)
                {
                    notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = err.code, Detail = err.description, Duration = 5000 });
                }
            }
        }
        else
        {
            Console.WriteLine("Deserilize fallo");
        }

        StateHasChanged();
    }
}