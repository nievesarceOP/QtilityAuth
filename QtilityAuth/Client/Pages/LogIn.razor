@layout LoginLayout
@page "/log_in"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IHttpClientFactory ClientFactory
@inject JwtAuthenticationStateProvider jwtprovider
@inject NavigationManager nav
@attribute [AllowAnonymous]

<div class="text-center">
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText class="form-control" id="Email" aria-describedby="emailHelp" placeholder="Email" @bind-Value=Email />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value=Password />
    </div>
    <div class="form-group">
        <button @onclick="Authenticate" id="login" name="login" class="btn btn-primary">Login</button>
    </div>
    <p>or</p>
    <a href="/registration">Register</a>
</div>

@code {
    public string Email { get; set; }
    public string Password { get; set; }

    record LogInResponse(string jwt, bool succeeded);

    protected override async Task OnInitializedAsync()
    {
        var u = await jwtprovider.GetAuthenticationStateAsync();

        if(u.User.Identity != null && u.User.Identity.IsAuthenticated)
        {
            nav.NavigateTo("/");
        }

        base.OnInitialized();
    }

    async Task Authenticate()
    {
        var client = ClientFactory.CreateClient();
        var values = new Dictionary<string, string>
          {
              { "Email", Email },
              { "Password", Password }
          };
        var content = new FormUrlEncodedContent(values);

        var response = await client.PostAsync("https://localhost:7235/login", content);

        var responseString = await response.Content.ReadAsStringAsync();

        if(responseString == string.Empty)
        {
            return;
        }

        var logInResponse = JsonSerializer.Deserialize<LogInResponse>(responseString);

        if (logInResponse == null)
        {
            return;
        }

        if (!logInResponse.succeeded)
        {
            return;
        }

        jwtprovider.Login(logInResponse.jwt);

        var u = await jwtprovider.GetAuthenticationStateAsync();

        if (u.User.Identity != null)
        {
            nav.NavigateTo("/");
        }
    }
}