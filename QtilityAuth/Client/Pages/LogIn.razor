@layout LoginLayout
@page "/log_in"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IHttpClientFactory ClientFactory
@inject JwtAuthenticationStateProvider jwtprovider
@inject NavigationManager nav
@attribute [AllowAnonymous]

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="true" AllowResetPassword="false" Username=@Email Password=@Password
                     AllowRememberMe="false"
                     Login=@(args => Authenticate(args, "Login with default values"))
                     Register=@(args => OnRegister("Login with default values")) />
    </RadzenTemplateForm>
</RadzenCard>

@code {
    public string Email { get; set; }
    public string Password { get; set; }

    record LogInResponse(string jwt, bool succeeded);

    protected override async Task OnInitializedAsync()
    {
        var u = await jwtprovider.GetAuthenticationStateAsync();

        if(u.User.Identity != null && u.User.Identity.IsAuthenticated)
        {
            nav.NavigateTo("/");
        }

        base.OnInitialized();
    }
    void OnRegister(string name)
    {
        nav.NavigateTo("/registration");
    }
    async Task Authenticate(LoginArgs args, string name)
    {
        var client = ClientFactory.CreateClient();
        var values = new Dictionary<string, string>
          {
              { "Email", args.Username },
              { "Password", args.Password }
          };
        var content = new FormUrlEncodedContent(values);

        var response = await client.PostAsync("https://localhost:7235/login", content);

        var responseString = await response.Content.ReadAsStringAsync();

        if(responseString == string.Empty)
        {
            return;
        }

        var logInResponse = JsonSerializer.Deserialize<LogInResponse>(responseString);

        if (logInResponse == null)
        {
            return;
        }

        if (!logInResponse.succeeded)
        {
            return;
        }

        jwtprovider.Login(logInResponse.jwt);

        var u = await jwtprovider.GetAuthenticationStateAsync();

        if (u.User.Identity != null)
        {
            nav.NavigateTo("/");
        }
    }
}